knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
train_url <- "data/train.csv"
train <- read.csv(train_url)
train <- read.csv("data/train.csv")
test <- read.csv("data/test.csv")
train
# Import the training set: train and test
train <- read.csv("data/train.csv")
test <- read.csv("data/test.csv")
# str() -> Structure, gives information such as the data types in the data frame (e.g. int for integer), the number of observations, and the number of variables.
str(train)
str(test)
table(train$Survived)
table(train$Survived)
prop.table(table(train$Survived))
table(train$Sex, train$Survived)
prop.table(table(train$Sex, train$Survived), 1)
prop.table(table(train$Child, train$Survived), 1)
# Create the column child, and indicate whether child or no child
train$Child <- NA
train$Child[train$Age < 18] <- 1
train$Child[train$Age >= 18]<- 0
# Two-way comparison
prop.table(table(train$Child, train$Survived), 1)
test$Child <- NA
test$Child[test$Age < 18] <- 1
test$Child[test$Age >= 18]<- 0
# To make a decision tree
# Rpart: Recursive Partitioning and Regression Trees
library(rpart)
# Build the decision tree
my_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = 'class')
# Visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# The resulting graph of the Decision tree is not so informative
# Load in the packages to build a fancy plot
library(rattle)
library(rattle)
install.packages("rattle")
install.packages(RColorBrewer)
install.packages("RColorBrewer")
# To make a decision tree
# Rpart: Recursive Partitioning and Regression Trees
library(rpart)
# Build the decision tree
my_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = 'class')
# Visualize the decision tree using plot() and text()
plot(my_tree)
text(my_tree)
# The resulting graph of the Decision tree is not so informative
# Load in the packages to build a fancy plot
library(rattle)
library("rattle")
library("rattle")
library("rattle")
library("rattle")
library(rpart.plot)
library("rattle")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library("rattle")
install.packages("rattle", repos="http://rattle.togaware.com")
install.packages("RGtk2")
install.packages("tidyr")
install.packages("dplyr")
install.packages("rattle")
install.packages('rattle', dependencies = TRUE)
library("rattle")
library("rattle")
# Make predictions on the test set
tree_prediction <- predict(my_tree, newdata = test, type = "class")
# Finish the data.frame() call
tree_solution <- data.frame(PassengerId = test$PassengerId, Survived = tree_prediction)
# Use nrow() on my_solution
nrow(tree_solution)
# Finish the write.csv() call
write.csv(tree_solution, file = "tree_solution.csv", row.names = FALSE)
# Make predictions on the test set
tree_prediction <- predict(my_tree, newdata = test, type = "class")
# Finish the data.frame() call
tree_solution <- data.frame(PassengerId = test$PassengerId, Survived = tree_prediction)
# Use nrow() on my_solution
nrow(tree_solution)
# Finish the write.csv() call
write.csv(tree_solution, file = "tree_solution.csv", row.names = FALSE)
# Make predictions on the test set
tree_prediction <- predict(my_tree, newdata = test, type = "class")
# Finish the data.frame() call
tree_solution <- data.frame(PassengerId = test$PassengerId, Survived = tree_prediction)
# Use nrow() on my_solution
nrow(tree_solution)
# Finish the write.csv() call
write.csv(tree_solution, file = "tree_solution.csv", row.names = FALSE)
tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,data = train, method = "class", control = rpart.control(minsplit = 50, cp = 0))
